add_action('admin_menu', 'register_form_folders_submenu', 15);
add_action('init', 'register_form_folders_taxonomy');
add_action('wp_ajax_create_folder', 'handle_create_folder');
add_action('wp_ajax_assign_form_to_folder', 'handle_assign_form_to_folder');
add_action('wp_ajax_remove_form_from_folder', 'handle_remove_form_from_folder');
add_action('wp_ajax_rename_folder', 'handle_folder_renaming');
add_action('wp_ajax_delete_folder', 'handle_folder_deletion');

/**
 * Registers a submenu page under the Gravity Forms menu for form folders.
 *
 * @return void
 */
function register_form_folders_submenu(): void
{
    add_submenu_page(
        'gf_edit_forms',
        'Form Folders',
        'Form Folders',
        'gform_full_access',
        'gf-form-folders',
        'render_form_folders_page'
    );
}

/**
 * Registers a custom taxonomy for organizing forms into folders.
 *
 * The taxonomy 'gf_form_folders' is associated with the 'gf_form' post type. It is not publicly queryable,
 * does not have URL rewrites, and supports a non-hierarchical structure. It includes an admin column for easier management in the admin interface.
 *
 * @return void
 */
function register_form_folders_taxonomy(): void
{
    register_taxonomy('gf_form_folders', 'gf_form', [
        'label' => 'Form Folders',
        'rewrite' => false,
        'public' => false,
        'show_admin_column' => true,
        'hierarchical' => false,
    ]);
}

/**
 * Handles the creation of a new folder for forms.
 *
 * Validates the current user's permission and the provided folder name.
 * Inserts a new term into the 'gf_form_folders' taxonomy. Returns a success or error message depending on the outcome.
 *
 * @return void Sends a JSON response indicating success or failure.
 */
function handle_create_folder(): void
{
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'create_folder')) {
        wp_send_json_error(['message' => 'Invalid nonce. Request rejected.'], 403);
        wp_die();
    }

    if (!current_user_can('gform_full_access')) {
        wp_send_json_error(['message' => 'Unauthorized'], 403);
        wp_die();
    }

    if (empty($_POST['folder_name'])) {
        wp_send_json_error(['message' => 'Folder name is required'], 403);
        wp_die();
    }

    $folder_name = sanitize_text_field($_POST['folder_name']);
    $inserted = wp_insert_term($folder_name, 'gf_form_folders');

    if (is_wp_error($inserted)) {
        wp_send_json_error(['message' => $inserted->get_error_message()], 403);
        wp_die();
    }

    wp_send_json_success(['message' => 'Folder created successfully!']);
    wp_die();
}

/**
 * Handles the process of assigning a form to a folder.
 *
 * Ensures the current user has the necessary permissions to perform the action.
 * Validates required input data, assigns the form to the specified folder,
 * and returns the appropriate success or error messages.
 *
 * @return void Outputs a JSON response indicating success or failure.
 */
function handle_assign_form_to_folder(): void
	{
		if (! isset($_POST['nonce']) || ! wp_verify_nonce($_POST['nonce'], 'assign_form')) {
			wp_send_json_error(['message' => 'Invalid nonce. Request rejected.'], 403);
			wp_die();
		}

		if (!current_user_can('gform_full_access')) {
			wp_send_json_error(['message' => 'Unauthorized']);
			wp_die();
		}

		if (empty($_POST['form_id']) || empty($_POST['folder_id'])) {
			wp_send_json_error(['message' => 'Form and Folder are required']);
			wp_die();
		}

		$form_id = absint($_POST['form_id']);
		$folder_id = absint($_POST['folder_id']);

		$result = wp_set_object_terms($form_id, [$folder_id], 'gf_form_folders');

		if (is_wp_error($result)) {
			wp_send_json_error(['message' => $result->get_error_message()]);
			wp_die();
		}

		wp_send_json_success(['message' => 'Form assigned successfully!']);
		wp_die();
	}

/**
 * Handles the removal of a form from a folder.
 *
 * This function validates the nonce, checks user permissions, and removes the specified form
 * from its associated folder. It sends a JSON response indicating success or failure.
 *
 * @return void Outputs a JSON response and terminates execution.
 */
function handle_remove_form_from_folder(): void {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'remove_form')) {
        wp_send_json_error(['message' => 'Invalid nonce. Request rejected.'], 403);
        wp_die();
    }

    if (!current_user_can('gform_full_access')) {
        wp_send_json_error(['message' => 'Unauthorized'], 403);
        wp_die();
    }

    if (empty($_POST['form_id'])) {
        wp_send_json_error(['message' => 'Form ID is required'], 403);
        wp_die();
    }

    $form_id = absint($_POST['form_id']);

    $result = wp_set_object_terms($form_id, [], 'gf_form_folders');

    if (is_wp_error($result)) {
        wp_send_json_error(['message' => $result->get_error_message()], 403);
        wp_die();
    }

    wp_send_json_success(['message' => 'Form removed from the folder successfully!']);
    wp_die();
}

/**
 * Handles the renaming of a folder via an AJAX request.
 *
 * This function validates the provided nonce, ensures required parameters
 * are present, and updates the folder name in the taxonomy. Errors are returned
 * in JSON format, and a success response is sent upon successful renaming.
 *
 * @return void This function exits with a JSON response and does not return.
 */
function handle_folder_renaming(): void {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'rename_folder')) {
        wp_send_json_error(['message' => 'Invalid nonce. Request rejected.'], 403);
        wp_die();
    }

    if (empty($_POST['folder_id']) || empty($_POST['folder_name'])) {
        wp_send_json_error(['message' => __('Missing required parameters.', 'my-textdomain')], 400);
        wp_die();
    }

    $folder_id = absint($_POST['folder_id']);
    $folder_name = sanitize_text_field($_POST['folder_name']);

    $folder = get_term($folder_id, 'gf_form_folders');
    if (is_wp_error($folder) || !$folder) {
        wp_send_json_error(['message' => __('The specified folder does not exist.', 'my-textdomain')], 404);
    }

    // Update the folder name
    $updated_folder = wp_update_term($folder_id, 'gf_form_folders', ['name' => $folder_name]);
    if (is_wp_error($updated_folder)) {
        wp_send_json_error(['message' => __('Failed to rename the folder. Please try again.', 'my-textdomain')]);
    }

    wp_send_json_success(['message' => __('Folder renamed successfully.', 'my-textdomain')]);
    wp_die();
}

function handle_folder_deletion(): void {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'delete_folder')) {
        wp_send_json_error(['message' => 'Invalid nonce. Request rejected.'], 403);
        wp_die();
    }
    if (empty($_POST['folder_id'])) {
        wp_send_json_error(['message' => 'Missing required parameters.'], 400);
    }
    $folder_id = absint($_POST['folder_id']);
    $folder = get_term($folder_id, 'gf_form_folders');
    if (is_wp_error($folder) || !$folder) {
        wp_send_json_error(['message' => 'The specified folder does not exist.'], 404);
    }
    $result = wp_delete_term($folder_id, 'gf_form_folders');
    if (is_wp_error($result)) {
        wp_send_json_error(['message' => 'Failed to delete the folder. Please try again.'], 403);
    } else {
        wp_send_json_success(['message' => 'Folder deleted successfully.']);
    }
}

/**
 * Renders the Form Folders admin page for the Gravity Forms plugin.
 *
 * This method displays the main "Form Folders" page or a detailed view of a specific folder
 * with its assigned forms. Includes functionality for viewing forms within a folder, creating
 * new folders, and assigning forms to folders. Access is restricted to users with full Gravity Forms access.
 *
 * @return void
 */
function render_form_folders_page(): void
{
    if (!current_user_can('gform_full_access')) {
        wp_die(__('You do not have sufficient permissions to access this page.'));
    }

    $folder_id = isset($_GET['folder_id']) ? absint($_GET['folder_id']) : 0;

    if ($folder_id) {
        $folder = get_term($folder_id, 'gf_form_folders');
        if (is_wp_error($folder) || !$folder) {
            echo '<div class="error"><p>Invalid folder.</p></div>';
            return;
        }
        ?>

        <div class="wrap">
        <h1>Forms in Folder: <?php echo esc_html($folder->name); ?> </h1>
        <!--Back button-->
        <a href="<?php echo esc_url(admin_url('admin.php?page=gf-form-folders')); ?>" class="button">Back to All
            Folders</a>

        <!--Forms Table-->
        <table class="wp-list-table widefat fixed striped">
            <thead>
            <tr>
                <th>Form Name</th>
                <th>Shortcode</th>
                <th>Settings</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>

            <?php
            $forms = GFAPI::get_forms();
            $found = false;

            foreach ($forms as $form) {
                $remove_form_nonce = wp_create_nonce('remove_form');
                $form_terms = wp_get_object_terms($form['id'], 'gf_form_folders', ['fields' => 'ids']);
                if (in_array($folder_id, $form_terms)) {
                    $found = true;
                    $settings_info = GFForms::get_form_settings_sub_menu_items($form['id']);
                    ?>
                    <tr>
                        <td>
                            <a href="<?php echo esc_url(admin_url('admin.php?page=gf_edit_forms&id=' . $form['id'])); ?>"><?php echo esc_html($form['title']); ?></a>
                        </td>
                        <td><code class="copyable" style="cursor: pointer;">[gravityform
                                id="<?php echo esc_attr($form['id']); ?>" title="false" description="false"]</code></td>
                        <td>
                            <a href="<?php echo esc_url(admin_url('admin.php?page=gf_edit_forms&id=' . $form['id'])); ?>">Edit</a>
                            |
                            <div class="dropdown" style="display: inline-block; position: relative;">
                                <a href="<?php echo esc_url(admin_url('admin.php?page=gf_entries&view=entries&id=' . $form['id'])); ?>"
                                   class="link">Entries</a>
                                <ul class="dropdown-menu"
                                    style="display: none; list-style: none; margin: 0; padding: 5px 0; background: #fff; border: 1px solid #ddd; position: absolute; top: 20px; left: 0; z-index: 1000; width: 200px; box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1);">
                                    <li style="padding: 5px 10px;"><a
                                                href="<?php echo esc_url(admin_url('admin.php?page=gf_entries&id=' . $form['id'])); ?>">Entries</a>
                                    </li>
                                    <li style="padding: 5px 10px;"><a
                                                href="<?php echo esc_url(admin_url('admin.php?page=gf_export&view=export_entry&id=' . $form['id'])); ?>">Export
                                            Entries</a></li>
                                    <?php if (in_array('gravityview-importer/gravityview-importer.php', get_option('active_plugins'), true)) {
                                        ?>
                                        <li style="padding: 5px 10px;"><a
                                                    href="<?php echo esc_url(admin_url('admin.php?page=gv-admin-import-entries#targetForm=' . $form['id'])); ?>">Import
                                                Entries</a></li>
                                        <?php
                                    }
                                    ?>
                                </ul>
                            </div>
                            |
                            <div class="dropdown" style="display: inline-block; position: relative;">
                                <a href="<?php echo esc_url(admin_url('admin.php?page=gf_edit_forms&view=settings&subview=settings&id=' . $form['id'])); ?>"
                                   class="link">Settings</a>
                                <!--Dropdown menu styling-->
                                <ul class="dropdown-menu"
                                    style="display: none; list-style: none; margin: 0; padding: 5px 0; background: #fff; border: 1px solid #ddd; position: absolute; top: 20px; left: 0; z-index: 1000; width: 200px; box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1);">
                                    <?php
                                    foreach ($settings_info as $setting) {
                                        ?>
                                        <li style="padding: 5px 10px;">
                                            <a href="<?php echo esc_url($setting['url']); ?>"
                                               style="text-decoration: none; color: #0073aa; display: flex; align-items: center; gap: 5px;">
                                                <span class="dashicons <?php echo esc_attr($setting['icon']); ?>"></span>
                                                <?php echo esc_html($setting['label']); ?>
                                            </a>
                                        </li>
                                        <?php
                                    }
                                    ?>
                                </ul>
                            </div>
                        </td>
                        <td>
                            <button class="remove-form"
                                    onclick="remove_form(<?php echo esc_attr($form['id']) . ', \'' . esc_attr($remove_form_nonce) . '\''; ?>);">
                                Remove
                            </button>
                        </td>
                    </tr>
                    <?php
                }
            }

            if (!$found) {
                echo '<tr><td colspan="4">No forms found in this folder.</td></tr>';
            }
            $rename_folder_nonce = wp_create_nonce('rename_folder');
            ?>
            </tbody>
        </table>
        <br><br>

        <h2>Rename Folder</h2>
        <form id="rename-folder-form">
            <input type="text" id="folder_name" name="folder_name" placeholder="Folder Name" required>
            <input type="hidden" id="folder_id" name="folder_id" value="<?php echo esc_attr($folder_id); ?>">
            <input type="hidden" name="nonce" value="<?php echo esc_attr($rename_folder_nonce); ?>">
            <button type="submit">Rename Folder</button>
        </form>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Enable hover functionality
                document.querySelectorAll('.dropdown').forEach(function (dropdown) {
                    const link = dropdown.querySelector('.link');
                    const menu = dropdown.querySelector('.dropdown-menu');

                    // Show dropdown on hover
                    link.addEventListener('mouseover', function () {
                        menu.style.display = 'block';
                    });

                    menu.addEventListener('mouseover', function () {
                        menu.style.display = 'block';
                    });

                    // Hide dropdown when the mouse leaves
                    dropdown.addEventListener('mouseleave', function () {
                        menu.style.display = 'none';
                    });
                });

                function handleFormSubmission(formId, action) {
                    document.getElementById(formId).addEventListener('submit', function (e) {
                        e.preventDefault();

                        let formData = new FormData(this);
                        formData.append('action', action);

                        fetch(ajaxurl, {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => response.json())
                            .then(() => location.reload());
                    });
                };
                handleFormSubmission('rename-folder-form', 'rename_folder');
                remove_form = function (formID, nonce) {
                    const body = `action=remove_form_from_folder&form_id=${encodeURIComponent(formID)}&nonce=${encodeURIComponent(nonce)}`;

                    fetch(ajaxurl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded', // Specify the correct content type
                        },
                        body,
                    })
                        .then(response => response.json())
                        .then(() => location.reload())
                        .catch(error => console.error('Error:', error));
                };
                document.querySelectorAll(".copyable").forEach(function (element) {
                    element.addEventListener("click", function () {
                        navigator.clipboard.writeText(element.innerHTML);
                        element.style.backgroundColor = "#d4edda"; // Light green to indicate success
                        setTimeout(() => {
                            element.style.backgroundColor = ""; // Revert after a short delay
                        }, 1000);
                    });
                });
            });
        </script>

        <?php
        echo '</div>';

        return;
    }

    ?>
    <div class="wrap">
        <h1>Form Folders</h1>
        <br>
        <ul>
            <?php

            $create_folder_nonce = wp_create_nonce('create_folder');
            $assign_form_nonce = wp_create_nonce('assign_form');
            $folders = get_terms(['taxonomy' => 'gf_form_folders', 'hide_empty' => false]);

            foreach ($folders as $folder) {
                $form_count = count(get_objects_in_term($folder->term_id, 'gf_form_folders'));
                echo '<li style="font-size: 3em;">
				<a href="' . esc_url(admin_url('admin.php?page=gf-form-folders&folder_id=' . $folder->term_id)) . '">
				<span class="dashicons dashicons-category" style="margin-right: 5px;"></span> ' . esc_html($folder->name) . ' (' . $form_count . ')
				</a>';
                if ( ! $form_count ) {
                    $delete_folder_nonce = wp_create_nonce('delete_folder');
                    echo '&nbsp;&nbsp;<button class="button" onclick="delete_folder(' . $folder->term_id . ', \'' . $delete_folder_nonce . '\')">Delete Folder</button>';
                }
				echo '</li>';
                echo '<br><br>';
            }
            ?>
        </ul>

        <div style="display: flex; gap: 20px; align-items: flex-start; justify-content: flex-start; max-width: 800px;">
            <div style="flex: 1;">
                <h2>Create a New Folder</h2>
                <form id="create-folder-form">
                    <input type="text" id="folder_name" name="folder_name" placeholder="Folder Name" required>
                    <input type="hidden" name="nonce" value="<?php echo esc_attr($create_folder_nonce); ?>">
                    <button type="submit">Create Folder</button>
                </form>
            </div>

            <div style="flex: 1;">
                <h2>Assign a Form to a Folder</h2>
                <form id="assign-form-form">
                    <select id="form_id" name="form_id" required>
                        <option value="">Select an Unassigned Form</option>
                        <?php
                        $all_forms = GFAPI::get_forms();
                        foreach ($all_forms as $form) {
                            $assigned_folders = wp_get_object_terms($form['id'], 'gf_form_folders', ['fields' => 'ids']);
                            if (empty($assigned_folders)) {
                                echo '<option value="' . esc_attr($form['id']) . '">' . esc_html($form['title']) . '</option>';
                            }
                        }
                        ?>
                    </select>
                    <select id="folder_id" name="folder_id" required>
                        <option value="">Select a Folder</option>
                        <?php foreach ($folders as $folder) {
                            echo '<option value="' . esc_attr($folder->term_id) . '">' . esc_html($folder->name) . '</option>';
                        } ?>
                    </select>
                    <input type="hidden" name="nonce" value="<?php echo esc_attr($assign_form_nonce); ?>">
                    <button type="submit">Assign Form</button>
                </form>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                delete_folder = function(folder_id, nonce) {
                    const body = `action=delete_folder&folder_id=${encodeURIComponent(folder_id)}&nonce=${encodeURIComponent(nonce)}`;
                    fetch(ajaxurl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded', // Specify the correct content type
                        },
                        body,
                    })
                        .then(response => response.json())
                        .then(() => location.reload())
                        .catch(error => console.error('Error:', error));
                }
                function handleFormSubmission(formId, action) {
                    document.getElementById(formId).addEventListener('submit', function (e) {
                        e.preventDefault();

                        let formData = new FormData(this);
                        formData.append('action', action);

                        fetch(ajaxurl, {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => response.json())
                            .then(() => location.reload());
                    });
                }

                handleFormSubmission('create-folder-form', 'create_folder');
                handleFormSubmission('assign-form-form', 'assign_form_to_folder');
            });
        </script>
    </div>
    <?php
}
