add_action( 'init', function () {
	add_shortcode( 'gfsearch', 'gfsearch_shortcode' );
});

function gfsearch_shortcode( $atts, $content = null ): string {
	/**
	 * Notes:
	 *
	 * For the target use 0 to search all forms or a form ID to search a specific form or a comma separated list of form IDs to
	 * search the specified forms.
	 *
	 * You can pass multiple id's to the search and display attributes, seperated by a comma, in order to search or display multiple fields. If you are searching
	 * for multiple fields enter the corresponding value as the content for the shortcode with each value to search for seperated by a comma. Make sure you have the
	 * same amount of values as fields you are searching and make sure they are in the same order.
	 *
	 * The search and display fields can be a field ID, entry property, or entry meta key.
	 *
	 * If you are searching for multiple values (fields) in the same entry you can use the search_mode attribute to determine if the entry must meet all the conditions
	 * or not. Default is all conditions. If you pass in the value any (search_mode="any") then the result will be returned if any condition matches.
	 *
	 * To perform a global search on the form for any field with the specified value, leave the corresponding search id blank. To just display the values from a field leave out the search attribute and the
	 * shortcode content.
	 *
	 * To check for multiple values for one field enter the field multiple times in the search attribute, with the desired values seperated by a comma as the shortcode content and set the
	 * search_mode attribute to "any".
	 *
	 * If you would like to search for results where the value is greater or less than the provided search value use the greater_than or less_than attributes.
	 * The attribute expects the field id first and then the number to filter by separated by a space and comma. For example greater_than="4, 500" will filter out
	 * all entries where field 4 has a value of less than 500.
	 *
	 * If you want to sort the entries use the sort_key, sort_direction, and sort_is_num.
	 * sort_key: The field ID, entry property, or entry meta key to sort the results.
	 * sort_direction: The direction to sort the results. Can be ASC, DESC, or RAND. Case-insensitive.
	 * sort_is_num: Indicates if the values of the specified key are numeric. Should be used in conjunction with the sort_key attribute.
	 *
	 * If you only want unique values use the attribute unique and give it any value (aside from 0 or an empty string).
	 *
	 * If you want to return a specific amount of results use the limit attribute. The default is one result. If you want to display all the results use the
	 * value 'all' (limit="all"), case-insensitive. If you enter a number greater than the total amount of results all of them will be returned. If you enter 0 or an empty string
	 * the default value will be used.
	 */

	$atts = shortcode_atts( [
		'target' => '0',
		'search' => '',
		'greater_than' => false,
		'less_than' => false,
		'display' => '',
		'sort_key' => 'id',
		'sort_direction' => 'DESC',
		'sort_is_num' => true,
		'unique' => false,
		'limit' => '1',
		'search_mode' => 'all'
	], $atts );

	$search_criteria                    = [];
	$search_criteria['status']          = 'active';
	$search_criteria['field_filters']   = [];
	$search_criteria['field_filters']['mode'] = in_array( strtolower( $atts['search_mode'] ), [ 'all', 'any' ], true ) ? strtolower( $atts['search_mode'] ) : 'all';

	$search_ids = array_map( 'sanitize_text_field', explode( ',', $atts['search'] ) );
	$search_ids = array_map( 'trim', $search_ids );

	$content_values = array_map( 'trim', explode( ',', $content ) );

	foreach( $search_ids as $index => $search_id ) {
		$search_criteria['field_filters'][] = [ 'key' => $search_id, 'value' => GFCommon::replace_variables( $content_values[ $index ], [], [] ) ];
	}

	$sorting = [
		'key' => sanitize_text_field( $atts['sort_key'] ),
		'direction' => in_array( strtoupper( $atts['sort_direction'] ), [ 'ASC', 'DESC', 'RAND' ], true ) ? strtoupper( $atts['sort_direction'] ) : 'DESC',
		'is_numeric' => (bool) $atts['sort_is_num']
	];

	$paging_offset = 0;
	$total_count = 0;

	if ( empty( $atts['limit'] ) ) {
		$page_size = 1;
	} elseif ( 'all' === strtolower( $atts['limit'] ) ) {
		$page_size = 25;
	} else {
		$page_size = min( intVal( $atts['limit'] ), 25 );
	}
	$paging = [
		'offset'    => $paging_offset,
		'page_size' => $page_size,
	];

	$form_id = array_map( 'intval', explode( ',', $atts['target'] ) );

	$entries = GFAPI::get_entries( $form_id, $search_criteria, $sorting, $paging, $total_count );

	if ( 'all' === $atts['limit'] || intVal( $atts['limit'] ) > 25 ) {
		while ( $total_count > count( $entries ) ) {
			$paging_offset += 25;
			$paging         = [
				'offset'    => $paging_offset,
				'page_size' => 25,
			];
			$new_entries = GFAPI::get_entries( $form_id, $search_criteria, $sorting, $paging, $total_count );
			array_push( $entries, ...$new_entries ); // $entries = array_merge( $entries, $new_entries );
			if ( is_numeric( $atts['limit'] ) && count( $entries ) > $atts['limit'] ){
				break;
			}
		}
		if ( is_numeric( $atts['limit'] ) ) {
			$entries = array_slice( $entries, 0, intVal( $atts['limit'] ) );
		}
	}

	if ( empty( $entries ) ) {
		return '';
	}

	if ( $atts['greater_than'] ) {
		$greater_than = array_map( 'trim', explode( ',', $atts['greater_than'] ) );
		$entries = array_filter( $entries, function( $entry ) use ( $greater_than ) {
			if ( $entry[ intval( $greater_than[0] ) ] > floatval( $greater_than[1] ) ) {
				return true;
			}
			return false;
		} );
	}
	if ( $atts['less_than'] ) {
		$less_than = array_map( 'trim', explode( ',', $atts['less_than'] ) );
		$entries = array_filter( $entries, function( $entry ) use ( $less_than ) {
			if ( $entry[ intval( $less_than[0] ) ] < floatval( $less_than[1] ) ) {
				return true;
			}
			return false;
		});
	}

	$results = [];

	$display_ids = array_map( 'sanitize_text_field', explode( ',', $atts['display'] ) );
	$display_ids = array_map( 'trim', $display_ids );
	$multi_input_present = false;
	foreach ( $entries as $entry ) {
		$entry_results = [];
		foreach ( $display_ids as $display_id ) {

			$field = GFAPI::get_field( $entry['form_id'], $display_id );
			if ( 'number' === $field->type && 'currency' === $field->numberFormat) {
				$entry_results[] = GFCommon::to_money( $entry[ $display_id ], $entry['currency'] );
			} elseif ( 'date' === $field->type ) {
				$entry_results[] = GFCommon::date_display( $entry[ $display_id ], 'Y-m-d', $field->dateFormat );
			} elseif ( is_multi_input_field( $field ) ) {
				$multi_input_present = true;
				$ids = array_column( $field['inputs'], 'id' );
				foreach ( $ids as $id ) {
					$entry_results[] = $entry[ $id ];
				}
			} else {
				$entry_results[] = $entry[ $display_id ];
			}
		}

		$entry_results = array_filter( $entry_results, fn( $value ) => '' !== $value && ! is_null($value) );
		$results[] = implode( ', ', $entry_results );
	}

	if ( $atts['unique'] ) {
		$results = array_unique( $results, SORT_STRING );
	}

	$results = array_map ( 'trim', $results );
	$results = array_filter( $results, fn( $value ) => '' !== $value && ! is_null($value) );

	$separator = ( count( $display_ids ) > 1 || $multi_input_present ) ? '; ' : ', ';
	return wp_kses_post( implode( $separator, $results ) );
}

function is_multi_input_field( $field ): bool {
	return 'name' === $field['type'] || 'address' === $field['type'] || 'checkbox' === $field['type'] || ( ( 'image_choice' === $field['type'] || 'multi_choice' === $field['type'] ) && 'checkbox' === $field['inputType'] );
}
