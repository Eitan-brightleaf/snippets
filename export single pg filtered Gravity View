add_action( 'init', function (){
    add_shortcode( 'export_filtered_entries', 'export_filtered_entries' );
});

function export_filtered_entries() {
    ob_start();
    ?>
        <script>
            function exportView() {
                // Select the table with class "gv-table-view" 
                const table = document.querySelector('.gv-table-view');

                // If the table exists
                if (table) {
                    // Get all header cells and rows
                    const headers = table.querySelectorAll('thead th');
                    const rows = table.querySelectorAll('tbody tr');

                    // Extract header names 
                    const headerNames = [];
                    headers.forEach(header => headerNames.push(header.textContent.trim()));

                    const entries = [];

                    // Iterate through each row
                    rows.forEach(row => {
                        const rowData = {};
                        // Get all cells in the row
                        const cells = row.querySelectorAll('td');
                        cells.forEach((cell, index) => {
                            // Match cell data to header name
                            if (headerNames[index]) {
                                let cellValue = (cell.textContent || '').trim();
                                // Wrap values containing ',' in double quotes
                                if (cellValue.includes(',')) {
                                    cellValue = `"${cellValue}"`;
                                }
                                rowData[headerNames[index]] = cellValue;
                            }
                        });
                        entries.push(rowData);
                    });
                    // Create CSV content
                    const csvContent = [
                        headerNames.join(','),
                        ...entries.map(entry => headerNames.map(header => entry[header] || '').join(','))
                    ].join('\n');

                    // Create and trigger download 
                    const blob = new Blob([csvContent], {type: 'text/csv;charset=utf-8;'});
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.setAttribute('download', 'filtered_entries.csv');
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }

        </script>
        <button type="button" class="button" onclick="exportView()" style="border-radius: 20px;">Export Filtered View</button>

	<?php
	return ob_get_clean();
}